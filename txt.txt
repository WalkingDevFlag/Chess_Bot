    # def extract_fen(self):
    #     """
    #     Extracts the FEN string representing the current board state, considering the player's color.
    #     Returns the FEN string if successful, otherwise None.
    #     """
    #     try:
    #         # Fetch board HTML content
    #         board_html = self.driver.find_element(By.XPATH, '//*[@id="board-play-computer"] | //*[@id="board-single"]').get_attribute("outerHTML")
    #         soup = BeautifulSoup(board_html, "html.parser")
    #         pieces = soup.find_all("div", class_="piece")

    #         piece_map = {
    #             "br": "r", "bn": "n", "bb": "b", "bq": "q", "bk": "k", "bp": "p",
    #             "wr": "R", "wn": "N", "wb": "B", "wq": "Q", "wk": "K", "wp": "P"
    #         }

    #         # Initialize an empty 8x8 board
    #         board = [["" for _ in range(8)] for _ in range(8)]

    #         for piece in pieces:
    #             piece_class = piece.get("class", [])
    #             square_class = [cls for cls in piece_class if cls.startswith("square-")]

    #             if len(piece_class) > 1 and square_class:
    #                 piece_type = piece_map.get(piece_class[1], "")
    #                 square = square_class[0].split("-")[1]
    #                 col = int(square[1]) - 1  # Convert column
    #                 row = 8 - int(square[0])  # Convert row (8-a1 to 0-indexed)

    #                 if piece_type:
    #                     board[row][col] = piece_type

    #         # Generate the FEN rows
    #         fen_rows = []
    #         for row in board:
    #             empty_count = 0
    #             fen_row = ""
    #             for square in row:
    #                 if square == "":
    #                     empty_count += 1
    #                 else:
    #                     if empty_count > 0:
    #                         fen_row += str(empty_count)
    #                         empty_count = 0
    #                     fen_row += square
    #             if empty_count > 0:
    #                 fen_row += str(empty_count)
    #             fen_rows.append(fen_row)

    #         # Determine the turn from the player's color
    #         player_color = self.color()
    #         if player_color == "white":
    #             turn = "w"
    #         elif player_color == "black":
    #             turn = "b"
    #         else:
    #             print("Failed to determine player color.")
    #             return None

    #         # Construct the complete FEN string
    #         fen = "/".join(fen_rows) + f" {turn} - - 0 1"
    #         print(f"Extracted FEN: {fen}")
    #         return fen

    #     except NoSuchElementException:
    #         print("Failed to extract FEN: No board element found.")
    #         return None